
RPLIDAR_f303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003108  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080032e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080032e4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a345  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c38  00000000  00000000  0002a381  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e17  00000000  00000000  0002d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008114  00000000  00000000  00045ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082685  00000000  00000000  0004dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002348  00000000  00000000  000d06d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003278 	.word	0x08003278

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003278 	.word	0x08003278

080001c8 <_ZN7RPLidarC1Ev>:

#include "RPLidar.h"

Uart serial;

RPLidar::RPLidar()
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
{
    _currentMeasurement.distance = 0;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f04f 0200 	mov.w	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f04f 0200 	mov.w	r2, #0
 80001de:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	725a      	strb	r2, [r3, #9]
}
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4618      	mov	r0, r3
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b082      	sub	sp, #8
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
{
    end();
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f000 f816 	bl	8000234 <_ZN7RPLidar3endEv>
}
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4618      	mov	r0, r3
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <_ZN7RPLidar5beginEP20__UART_HandleTypeDef>:

// open the given serial interface and try to connect to the RPLIDAR
bool RPLidar::begin(UART_HandleTypeDef *huart)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	serial.begin(huart);
 800021e:	6839      	ldr	r1, [r7, #0]
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <_ZN7RPLidar5beginEP20__UART_HandleTypeDef+0x1c>)
 8000222:	f000 fd21 	bl	8000c68 <_ZN4Uart5beginEP20__UART_HandleTypeDef>
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000028 	.word	0x20000028

08000234 <_ZN7RPLidar3endEv>:

// close the currently opened serial interface
void RPLidar::end()
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
/*    if (isOpen()) {
       _bined_serialdev->end();
       _bined_serialdev = NULL;
    }
*/
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm>:
    return RESULT_OPERATION_TIMEOUT;
}

// ask the RPLIDAR for its device info like the serial number
u_result RPLidar::getDeviceInfo(rplidar_response_device_info_t & info, _u32 timeout )
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08c      	sub	sp, #48	; 0x30
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	607a      	str	r2, [r7, #4]
    _u8  recvPos = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    _u32 currentTs = HAL_GetTick();
 800025a:	f000 fdc3 	bl	8000de4 <HAL_GetTick>
 800025e:	62b8      	str	r0, [r7, #40]	; 0x28
    _u32 remainingtime;
    _u8 *infobuf = (_u8*)&info;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
    u_result  ans;

    //if (!isOpen()) return RESULT_OPERATION_FAIL;

    {
        if (IS_FAIL(ans = _sendCommand(RPLIDAR_CMD_GET_DEVICE_INFO,NULL,0))) {
 8000264:	2300      	movs	r3, #0
 8000266:	2200      	movs	r2, #0
 8000268:	2150      	movs	r1, #80	; 0x50
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f000 f93c 	bl	80004e8 <_ZN7RPLidar12_sendCommandEhPKvj>
 8000270:	6238      	str	r0, [r7, #32]
 8000272:	6a3b      	ldr	r3, [r7, #32]
 8000274:	0fdb      	lsrs	r3, r3, #31
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x38>
            return ans;
 800027c:	6a3b      	ldr	r3, [r7, #32]
 800027e:	e04a      	b.n	8000316 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xce>
        }

        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) {
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	4619      	mov	r1, r3
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f000 f98d 	bl	80005a8 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 800028e:	6238      	str	r0, [r7, #32]
 8000290:	6a3b      	ldr	r3, [r7, #32]
 8000292:	0fdb      	lsrs	r3, r3, #31
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x56>
            return ans;
 800029a:	6a3b      	ldr	r3, [r7, #32]
 800029c:	e03b      	b.n	8000316 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xce>
        }

        // verify whether we got a correct header
        if (response_header.type != RPLIDAR_ANS_TYPE_DEVINFO) {
 800029e:	7dbb      	ldrb	r3, [r7, #22]
 80002a0:	2b04      	cmp	r3, #4
 80002a2:	d002      	beq.n	80002aa <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x62>
            return RESULT_INVALID_DATA;
 80002a4:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80002a8:	e035      	b.n	8000316 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xce>
        }

        if (response_header.size < sizeof(rplidar_response_device_info_t)) {
 80002aa:	8a7b      	ldrh	r3, [r7, #18]
 80002ac:	8aba      	ldrh	r2, [r7, #20]
 80002ae:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80002b2:	0412      	lsls	r2, r2, #16
 80002b4:	4313      	orrs	r3, r2
 80002b6:	2b13      	cmp	r3, #19
 80002b8:	d802      	bhi.n	80002c0 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x78>
            return RESULT_INVALID_DATA;
 80002ba:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80002be:	e02a      	b.n	8000316 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xce>
        }

        while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 80002c0:	f000 fd90 	bl	8000de4 <HAL_GetTick>
 80002c4:	4602      	mov	r2, r0
 80002c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	61fb      	str	r3, [r7, #28]
 80002cc:	69fa      	ldr	r2, [r7, #28]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	bf94      	ite	ls
 80002d4:	2301      	movls	r3, #1
 80002d6:	2300      	movhi	r3, #0
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d01a      	beq.n	8000314 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xcc>
            //int currentbyte = _bined_serialdev->read();
        	int currentbyte = serial.getc();
 80002de:	4810      	ldr	r0, [pc, #64]	; (8000320 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xd8>)
 80002e0:	f000 fcd0 	bl	8000c84 <_ZN4Uart4getcEv>
 80002e4:	4603      	mov	r3, r0
 80002e6:	61bb      	str	r3, [r7, #24]
            if (currentbyte<0) continue;
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	db10      	blt.n	8000310 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xc8>
            infobuf[recvPos++] = currentbyte;
 80002ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80002f8:	461a      	mov	r2, r3
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	4413      	add	r3, r2
 80002fe:	69ba      	ldr	r2, [r7, #24]
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	701a      	strb	r2, [r3, #0]

            if (recvPos == sizeof(rplidar_response_device_info_t)) {
 8000304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000308:	2b14      	cmp	r3, #20
 800030a:	d1d9      	bne.n	80002c0 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x78>
                return RESULT_OK;
 800030c:	2300      	movs	r3, #0
 800030e:	e002      	b.n	8000316 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xce>
            if (currentbyte<0) continue;
 8000310:	bf00      	nop
        while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 8000312:	e7d5      	b.n	80002c0 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0x78>
            }
        }
    }

    return RESULT_OPERATION_TIMEOUT;
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm+0xdc>)
}
 8000316:	4618      	mov	r0, r3
 8000318:	3730      	adds	r7, #48	; 0x30
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	80008002 	.word	0x80008002

08000328 <_ZN7RPLidar4stopEv>:

// stop the measurement operation
u_result RPLidar::stop()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    //if (!isOpen()) return RESULT_OPERATION_FAIL;
    u_result ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 8000330:	2300      	movs	r3, #0
 8000332:	2200      	movs	r2, #0
 8000334:	2125      	movs	r1, #37	; 0x25
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f8d6 	bl	80004e8 <_ZN7RPLidar12_sendCommandEhPKvj>
 800033c:	60f8      	str	r0, [r7, #12]
    return ans;
 800033e:	68fb      	ldr	r3, [r7, #12]
}
 8000340:	4618      	mov	r0, r3
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <_ZN7RPLidar9startScanEbm>:

// start the measurement operation
u_result RPLidar::startScan(bool force, _u32 timeout)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	460b      	mov	r3, r1
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	72fb      	strb	r3, [r7, #11]
    u_result ans;

    //if (!isOpen()) return RESULT_OPERATION_FAIL;

    stop(); //force the previous operation to stop
 8000356:	68f8      	ldr	r0, [r7, #12]
 8000358:	f7ff ffe6 	bl	8000328 <_ZN7RPLidar4stopEv>

    {
        ans = _sendCommand(force?RPLIDAR_CMD_FORCE_SCAN:RPLIDAR_CMD_SCAN, NULL, 0);
 800035c:	7afb      	ldrb	r3, [r7, #11]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <_ZN7RPLidar9startScanEbm+0x1e>
 8000362:	2121      	movs	r1, #33	; 0x21
 8000364:	e000      	b.n	8000368 <_ZN7RPLidar9startScanEbm+0x20>
 8000366:	2120      	movs	r1, #32
 8000368:	2300      	movs	r3, #0
 800036a:	2200      	movs	r2, #0
 800036c:	68f8      	ldr	r0, [r7, #12]
 800036e:	f000 f8bb 	bl	80004e8 <_ZN7RPLidar12_sendCommandEhPKvj>
 8000372:	4603      	mov	r3, r0
 8000374:	61fb      	str	r3, [r7, #28]
        if (IS_FAIL(ans)) return ans;
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	2b00      	cmp	r3, #0
 800037a:	da01      	bge.n	8000380 <_ZN7RPLidar9startScanEbm+0x38>
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	e021      	b.n	80003c4 <_ZN7RPLidar9startScanEbm+0x7c>

        // waiting for confirmation
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) {
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4619      	mov	r1, r3
 8000388:	68f8      	ldr	r0, [r7, #12]
 800038a:	f000 f90d 	bl	80005a8 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 800038e:	4603      	mov	r3, r0
 8000390:	61fb      	str	r3, [r7, #28]
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	0fdb      	lsrs	r3, r3, #31
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <_ZN7RPLidar9startScanEbm+0x58>
            return ans;
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	e011      	b.n	80003c4 <_ZN7RPLidar9startScanEbm+0x7c>
        }

        // verify whether we got a correct header
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) {
 80003a0:	7ebb      	ldrb	r3, [r7, #26]
 80003a2:	2b81      	cmp	r3, #129	; 0x81
 80003a4:	d002      	beq.n	80003ac <_ZN7RPLidar9startScanEbm+0x64>
            return RESULT_INVALID_DATA;
 80003a6:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80003aa:	e00b      	b.n	80003c4 <_ZN7RPLidar9startScanEbm+0x7c>
        }

        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) {
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	8b3a      	ldrh	r2, [r7, #24]
 80003b0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80003b4:	0412      	lsls	r2, r2, #16
 80003b6:	4313      	orrs	r3, r2
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	d802      	bhi.n	80003c2 <_ZN7RPLidar9startScanEbm+0x7a>
            return RESULT_INVALID_DATA;
 80003bc:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80003c0:	e000      	b.n	80003c4 <_ZN7RPLidar9startScanEbm+0x7c>
        }
    }
    return RESULT_OK;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <_ZN7RPLidar9waitPointEm>:

// wait for one sample point to arrive
u_result RPLidar::waitPoint(_u32 timeout)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
   _u32 currentTs = HAL_GetTick();
 80003d6:	f000 fd05 	bl	8000de4 <HAL_GetTick>
 80003da:	6238      	str	r0, [r7, #32]
   _u32 remainingtime;
   rplidar_response_measurement_node_t node;
   _u8 *nodebuf = (_u8*)&node;
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	61fb      	str	r3, [r7, #28]

   _u8 recvPos = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

   while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 80003e8:	f000 fcfc 	bl	8000de4 <HAL_GetTick>
 80003ec:	4602      	mov	r2, r0
 80003ee:	6a3b      	ldr	r3, [r7, #32]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	61bb      	str	r3, [r7, #24]
 80003f4:	69ba      	ldr	r2, [r7, #24]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	bf94      	ite	ls
 80003fc:	2301      	movls	r3, #1
 80003fe:	2300      	movhi	r3, #0
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d064      	beq.n	80004d0 <_ZN7RPLidar9waitPointEm+0x104>
        //int currentbyte = _bined_serialdev->read();
	    int currentbyte = serial.getc();
 8000406:	4835      	ldr	r0, [pc, #212]	; (80004dc <_ZN7RPLidar9waitPointEm+0x110>)
 8000408:	f000 fc3c 	bl	8000c84 <_ZN4Uart4getcEv>
 800040c:	4603      	mov	r3, r0
 800040e:	617b      	str	r3, [r7, #20]
        if (currentbyte<0) continue;
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	2b00      	cmp	r3, #0
 8000414:	db5a      	blt.n	80004cc <_ZN7RPLidar9waitPointEm+0x100>

        switch (recvPos) {
 8000416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <_ZN7RPLidar9waitPointEm+0x58>
 800041e:	2b01      	cmp	r3, #1
 8000420:	d00b      	beq.n	800043a <_ZN7RPLidar9waitPointEm+0x6e>
 8000422:	e016      	b.n	8000452 <_ZN7RPLidar9waitPointEm+0x86>
            case 0: // expect the sync bit and its reverse in this byte          {
                {
                    _u8 tmp = (currentbyte>>1);
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	74fb      	strb	r3, [r7, #19]
                    if ( (tmp ^ currentbyte) & 0x1 ) {
 800042a:	7cfa      	ldrb	r2, [r7, #19]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	4053      	eors	r3, r2
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d109      	bne.n	800044c <_ZN7RPLidar9waitPointEm+0x80>
                        // pass
                    } else {
                        continue;
 8000438:	e049      	b.n	80004ce <_ZN7RPLidar9waitPointEm+0x102>

                }
                break;
            case 1: // expect the highest bit to be 1
                {
                    if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	2b00      	cmp	r3, #0
 8000442:	d105      	bne.n	8000450 <_ZN7RPLidar9waitPointEm+0x84>
                        // pass
                    } else {
                        recvPos = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        continue;
 800044a:	e040      	b.n	80004ce <_ZN7RPLidar9waitPointEm+0x102>
                break;
 800044c:	bf00      	nop
 800044e:	e000      	b.n	8000452 <_ZN7RPLidar9waitPointEm+0x86>
                    }
                }
                break;
 8000450:	bf00      	nop
          }
          nodebuf[recvPos++] = currentbyte;
 8000452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800045c:	461a      	mov	r2, r3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	4413      	add	r3, r2
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	701a      	strb	r2, [r3, #0]

          if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 8000468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800046c:	2b05      	cmp	r3, #5
 800046e:	d1bb      	bne.n	80003e8 <_ZN7RPLidar9waitPointEm+0x1c>
              // store the data ...
              _currentMeasurement.distance = node.distance_q2/4.0f;
 8000470:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8000474:	b29b      	uxth	r3, r3
 8000476:	ee07 3a90 	vmov	s15, r3
 800047a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800047e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	edc3 7a00 	vstr	s15, [r3]
              _currentMeasurement.angle = (node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT)/64.0f;
 800048c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8000490:	b29b      	uxth	r3, r3
 8000492:	105b      	asrs	r3, r3, #1
 8000494:	ee07 3a90 	vmov	s15, r3
 8000498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800049c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80004e0 <_ZN7RPLidar9waitPointEm+0x114>
 80004a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	edc3 7a01 	vstr	s15, [r3, #4]
              _currentMeasurement.quality = (node.sync_quality>>RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
 80004aa:	7b3b      	ldrb	r3, [r7, #12]
 80004ac:	109b      	asrs	r3, r3, #2
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	721a      	strb	r2, [r3, #8]
              _currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf14      	ite	ne
 80004be:	2301      	movne	r3, #1
 80004c0:	2300      	moveq	r3, #0
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	725a      	strb	r2, [r3, #9]
              return RESULT_OK;
 80004c8:	2300      	movs	r3, #0
 80004ca:	e002      	b.n	80004d2 <_ZN7RPLidar9waitPointEm+0x106>
        if (currentbyte<0) continue;
 80004cc:	bf00      	nop
   while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 80004ce:	e78b      	b.n	80003e8 <_ZN7RPLidar9waitPointEm+0x1c>
          }

   }

   return RESULT_OPERATION_TIMEOUT;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <_ZN7RPLidar9waitPointEm+0x118>)
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3728      	adds	r7, #40	; 0x28
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028
 80004e0:	42800000 	.word	0x42800000
 80004e4:	80008002 	.word	0x80008002

080004e8 <_ZN7RPLidar12_sendCommandEhPKvj>:



u_result RPLidar::_sendCommand(_u8 cmd, const void * payload, size_t payloadsize)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	607a      	str	r2, [r7, #4]
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	460b      	mov	r3, r1
 80004f6:	72fb      	strb	r3, [r7, #11]

    rplidar_cmd_packet_t pkt_header;
    rplidar_cmd_packet_t * header = &pkt_header;
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	617b      	str	r3, [r7, #20]
    _u8 checksum = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	77fb      	strb	r3, [r7, #31]

    if (payloadsize && payload) {
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <_ZN7RPLidar12_sendCommandEhPKvj+0x2e>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d003      	beq.n	8000516 <_ZN7RPLidar12_sendCommandEhPKvj+0x2e>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 800050e:	7afb      	ldrb	r3, [r7, #11]
 8000510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000514:	72fb      	strb	r3, [r7, #11]
    }

    header->syncByte = RPLIDAR_CMD_SYNC_BYTE;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	22a5      	movs	r2, #165	; 0xa5
 800051a:	701a      	strb	r2, [r3, #0]
    header->cmd_flag = cmd;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	7afa      	ldrb	r2, [r7, #11]
 8000520:	705a      	strb	r2, [r3, #1]

    // send header first
    //_bined_serialdev->write( (uint8_t *)header, 2);
    serial.putc(header->syncByte );
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	481e      	ldr	r0, [pc, #120]	; (80005a4 <_ZN7RPLidar12_sendCommandEhPKvj+0xbc>)
 800052a:	f000 fbbf 	bl	8000cac <_ZN4Uart4putcEh>
    serial.putc(header->cmd_flag );
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	4619      	mov	r1, r3
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <_ZN7RPLidar12_sendCommandEhPKvj+0xbc>)
 8000536:	f000 fbb9 	bl	8000cac <_ZN4Uart4putcEh>

    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 800053a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800053e:	2b00      	cmp	r3, #0
 8000540:	da2a      	bge.n	8000598 <_ZN7RPLidar12_sendCommandEhPKvj+0xb0>
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 8000542:	7ffb      	ldrb	r3, [r7, #31]
 8000544:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 8000548:	43db      	mvns	r3, r3
 800054a:	77fb      	strb	r3, [r7, #31]
        checksum ^= cmd;
 800054c:	7ffa      	ldrb	r2, [r7, #31]
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	4053      	eors	r3, r2
 8000552:	77fb      	strb	r3, [r7, #31]
        checksum ^= (payloadsize & 0xFF);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	7ffb      	ldrb	r3, [r7, #31]
 800055a:	4053      	eors	r3, r2
 800055c:	77fb      	strb	r3, [r7, #31]

        // calc checksum
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	69ba      	ldr	r2, [r7, #24]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d20a      	bcs.n	8000580 <_ZN7RPLidar12_sendCommandEhPKvj+0x98>
            checksum ^= ((_u8 *)payload)[pos];
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7ffb      	ldrb	r3, [r7, #31]
 8000574:	4053      	eors	r3, r2
 8000576:	77fb      	strb	r3, [r7, #31]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	3301      	adds	r3, #1
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	e7f0      	b.n	8000562 <_ZN7RPLidar12_sendCommandEhPKvj+0x7a>
        }

        // send size
        _u8 sizebyte = payloadsize;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	74fb      	strb	r3, [r7, #19]
        //_bined_serialdev->write((uint8_t *)&sizebyte, 1);
        serial.putc(sizebyte);
 8000584:	7cfb      	ldrb	r3, [r7, #19]
 8000586:	4619      	mov	r1, r3
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <_ZN7RPLidar12_sendCommandEhPKvj+0xbc>)
 800058a:	f000 fb8f 	bl	8000cac <_ZN4Uart4putcEh>
        //_bined_serialdev->write((uint8_t *)&payload, sizebyte);
        //serial.putc(payload);

        // send checksum
        //_bined_serialdev->write((uint8_t *)&checksum, 1);
        serial.putc(checksum);
 800058e:	7ffb      	ldrb	r3, [r7, #31]
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <_ZN7RPLidar12_sendCommandEhPKvj+0xbc>)
 8000594:	f000 fb8a 	bl	8000cac <_ZN4Uart4putcEh>

    }

    return RESULT_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028

080005a8 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:

u_result RPLidar::_waitResponseHeader(rplidar_ans_header_t * header, _u32 timeout)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
    _u8  recvPos = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    _u32 currentTs = HAL_GetTick();
 80005ba:	f000 fc13 	bl	8000de4 <HAL_GetTick>
 80005be:	6238      	str	r0, [r7, #32]
    _u32 remainingtime;
    _u8 *headerbuf = (_u8*)header;
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	61fb      	str	r3, [r7, #28]
    while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 80005c4:	f000 fc0e 	bl	8000de4 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	6a3b      	ldr	r3, [r7, #32]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	bf94      	ite	ls
 80005d8:	2301      	movls	r3, #1
 80005da:	2300      	movhi	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d02f      	beq.n	8000642 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x9a>

        //int currentbyte = _bined_serialdev->read();
    	int currentbyte = serial.getc();
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa4>)
 80005e4:	f000 fb4e 	bl	8000c84 <_ZN4Uart4getcEv>
 80005e8:	4603      	mov	r3, r0
 80005ea:	617b      	str	r3, [r7, #20]
        if (currentbyte<0) continue;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db25      	blt.n	800063e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x96>
        switch (recvPos) {
 80005f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x58>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d004      	beq.n	8000608 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x60>
 80005fe:	e00d      	b.n	800061c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x74>
        case 0:
            if (currentbyte != RPLIDAR_ANS_SYNC_BYTE1) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2ba5      	cmp	r3, #165	; 0xa5
 8000604:	d007      	beq.n	8000616 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6e>
                continue;
 8000606:	e01b      	b.n	8000640 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            }
            break;
        case 1:
            if (currentbyte != RPLIDAR_ANS_SYNC_BYTE2) {
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b5a      	cmp	r3, #90	; 0x5a
 800060c:	d005      	beq.n	800061a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x72>
                recvPos = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                continue;
 8000614:	e014      	b.n	8000640 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            break;
 8000616:	bf00      	nop
 8000618:	e000      	b.n	800061c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x74>
            }
            break;
 800061a:	bf00      	nop
        }
        headerbuf[recvPos++] = currentbyte;
 800061c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000626:	461a      	mov	r2, r3
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	4413      	add	r3, r2
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	701a      	strb	r2, [r3, #0]

        if (recvPos == sizeof(rplidar_ans_header_t)) {
 8000632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000636:	2b07      	cmp	r3, #7
 8000638:	d1c4      	bne.n	80005c4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1c>
            return RESULT_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e002      	b.n	8000644 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x9c>
        if (currentbyte<0) continue;
 800063e:	bf00      	nop
    while ((remainingtime=HAL_GetTick() - currentTs) <= timeout) {
 8000640:	e7c0      	b.n	80005c4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1c>
        }


    }

    return RESULT_OPERATION_TIMEOUT;
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>)
}
 8000644:	4618      	mov	r0, r3
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	80008002 	.word	0x80008002

08000654 <_ZN7RPLidar15getCurrentPointEv>:
    // wait for one sample point to arrive
    u_result waitPoint(_u32 timeout = RPLIDAR_DEFAULT_TIMEOUT);

    // retrieve currently received sample point

    const RPLidarMeasurement & getCurrentPoint()
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    {
        return _currentMeasurement;
 800065c:	687b      	ldr	r3, [r7, #4]
    }
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fb5d 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f857 	bl	8000728 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f95d 	bl	8000938 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800067e:	f000 f927 	bl	80008d0 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000682:	f000 f8b3 	bl	80007ec <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000686:	f000 f8ef 	bl	8000868 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  //setup
  lidar.begin(&huart1);
 800068a:	4925      	ldr	r1, [pc, #148]	; (8000720 <main+0xb4>)
 800068c:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0xb8>)
 800068e:	f7ff fdc1 	bl	8000214 <_ZN7RPLidar5beginEP20__UART_HandleTypeDef>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (IS_OK(lidar.waitPoint())) {
 8000692:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000696:	4823      	ldr	r0, [pc, #140]	; (8000724 <main+0xb8>)
 8000698:	f7ff fe98 	bl	80003cc <_ZN7RPLidar9waitPointEm>
 800069c:	4603      	mov	r3, r0
 800069e:	43db      	mvns	r3, r3
 80006a0:	0fdb      	lsrs	r3, r3, #31
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d018      	beq.n	80006da <main+0x6e>
	    float distance = lidar.getCurrentPoint().distance; //distance value in mm unit
 80006a8:	481e      	ldr	r0, [pc, #120]	; (8000724 <main+0xb8>)
 80006aa:	f7ff ffd3 	bl	8000654 <_ZN7RPLidar15getCurrentPointEv>
 80006ae:	4603      	mov	r3, r0
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	61fb      	str	r3, [r7, #28]
	    float angle    = lidar.getCurrentPoint().angle; //anglue value in degree
 80006b4:	481b      	ldr	r0, [pc, #108]	; (8000724 <main+0xb8>)
 80006b6:	f7ff ffcd 	bl	8000654 <_ZN7RPLidar15getCurrentPointEv>
 80006ba:	4603      	mov	r3, r0
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	61bb      	str	r3, [r7, #24]
	    bool  startBit = lidar.getCurrentPoint().startBit; //whether this point is belong to a new scan
 80006c0:	4818      	ldr	r0, [pc, #96]	; (8000724 <main+0xb8>)
 80006c2:	f7ff ffc7 	bl	8000654 <_ZN7RPLidar15getCurrentPointEv>
 80006c6:	4603      	mov	r3, r0
 80006c8:	7a5b      	ldrb	r3, [r3, #9]
 80006ca:	75fb      	strb	r3, [r7, #23]
	    unsigned char  quality  = lidar.getCurrentPoint().quality; //quality of the current measurement
 80006cc:	4815      	ldr	r0, [pc, #84]	; (8000724 <main+0xb8>)
 80006ce:	f7ff ffc1 	bl	8000654 <_ZN7RPLidar15getCurrentPointEv>
 80006d2:	4603      	mov	r3, r0
 80006d4:	7a1b      	ldrb	r3, [r3, #8]
 80006d6:	75bb      	strb	r3, [r7, #22]
 80006d8:	e7db      	b.n	8000692 <main+0x26>

	  } else {
	    //analogWrite(RPLIDAR_MOTOR, 0);
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 fe05 	bl	80012f0 <HAL_GPIO_WritePin>

	    // try to detect RPLIDAR...
	    rplidar_response_device_info_t info;
	    if (IS_OK(lidar.getDeviceInfo(info, 100))) {
 80006e6:	463b      	mov	r3, r7
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	4619      	mov	r1, r3
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <main+0xb8>)
 80006ee:	f7ff fdab 	bl	8000248 <_ZN7RPLidar13getDeviceInfoER31_rplidar_response_device_info_tm>
 80006f2:	4603      	mov	r3, r0
 80006f4:	43db      	mvns	r3, r3
 80006f6:	0fdb      	lsrs	r3, r3, #31
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0c9      	beq.n	8000692 <main+0x26>
	       // detected...
	       lidar.startScan();
 80006fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000702:	2100      	movs	r1, #0
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <main+0xb8>)
 8000706:	f7ff fe1f 	bl	8000348 <_ZN7RPLidar9startScanEbm>

	       // start motor rotating at max allowed speed
	       //analogWrite(RPLIDAR_MOTOR, 255);
	       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2108      	movs	r1, #8
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 fded 	bl	80012f0 <HAL_GPIO_WritePin>
	       HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f000 fb6f 	bl	8000dfc <HAL_Delay>
	    }
	  }
  }
 800071e:	e7b8      	b.n	8000692 <main+0x26>
 8000720:	20000090 	.word	0x20000090
 8000724:	20000190 	.word	0x20000190

08000728 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fd96 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fdd5 	bl	8001320 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000786:	f000 f915 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fcc3 	bl	8002130 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf14      	ite	ne
 80007b0:	2301      	movne	r3, #1
 80007b2:	2300      	moveq	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80007ba:	f000 f8fb 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007be:	2301      	movs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fee7 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80007de:	f000 f8e9 	bl	80009b4 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3758      	adds	r7, #88	; 0x58
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <_ZL12MX_SPI1_Initv+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000804:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000808:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 8000844:	f001 ffd0 	bl	80027e8 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_ZL12MX_SPI1_Initv+0x70>
  {
    Error_Handler();
 8000858:	f000 f8ac 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000002c 	.word	0x2000002c
 8000864:	40013000 	.word	0x40013000

08000868 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <_ZL19MX_USART1_UART_Initv+0x64>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008ac:	f002 f826 	bl	80028fc <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80008c0:	f000 f878 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000090 	.word	0x20000090
 80008cc:	40013800 	.word	0x40013800

080008d0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <_ZL19MX_USART2_UART_Initv+0x64>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000914:	f001 fff2 	bl	80028fc <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000928:	f000 f844 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000110 	.word	0x20000110
 8000934:	40004400 	.word	0x40004400

08000938 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <_ZL12MX_GPIO_Initv+0x78>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 fcb3 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098a:	2308      	movs	r3, #8
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fb32 	bl	800100c <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <_Z41__static_initialization_and_destruction_0ii>:
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d107      	bne.n	80009e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009da:	4293      	cmp	r3, r2
 80009dc:	d102      	bne.n	80009e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
RPLidar lidar;
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80009e0:	f7ff fbf2 	bl	80001c8 <_ZN7RPLidarC1Ev>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d107      	bne.n	80009fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d102      	bne.n	80009fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80009f6:	f7ff fc00 	bl	80001fa <_ZN7RPLidarD1Ev>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000190 	.word	0x20000190

08000a08 <_GLOBAL__sub_I_hspi1>:
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff ffd7 	bl	80009c4 <_Z41__static_initialization_and_destruction_0ii>
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_GLOBAL__sub_D_hspi1>:
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ffcf 	bl	80009c4 <_Z41__static_initialization_and_destruction_0ii>
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_SPI_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ac2:	23e0      	movs	r3, #224	; 0xe0
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fa94 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013000 	.word	0x40013000
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <HAL_UART_MspInit+0xe0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12a      	bne.n	8000b6c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fa51 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	e02e      	b.n	8000bca <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0xe8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d129      	bne.n	8000bca <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_UART_MspInit+0xe4>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ba6:	f248 0304 	movw	r3, #32772	; 0x8004
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fa21 	bl	800100c <HAL_GPIO_Init>
}
 8000bca:	bf00      	nop
 8000bcc:	3730      	adds	r7, #48	; 0x30
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40004400 	.word	0x40004400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f8c2 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SystemInit+0x28>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <SystemInit+0x28>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SystemInit+0x28>)
 8000c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c56:	609a      	str	r2, [r3, #8]
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <_ZN4Uart5beginEP20__UART_HandleTypeDef>:
 */

#include <uart_lib.h>

void Uart::begin(UART_HandleTypeDef *huart)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	phuart = huart;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZN4Uart4getcEv>:

unsigned char Uart::getc()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	unsigned char data[1] = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	733b      	strb	r3, [r7, #12]
	HAL_UART_Receive(phuart, data, 1, 1000);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	f107 010c 	add.w	r1, r7, #12
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f001 ff0e 	bl	8002abe <HAL_UART_Receive>
	return data[0];
 8000ca2:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_ZN4Uart4putcEh>:

void Uart::putc(unsigned char put_data)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
	unsigned char data[1] = {0};
 8000cb8:	2300      	movs	r3, #0
 8000cba:	733b      	strb	r3, [r7, #12]
	data[0] = put_data;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(phuart, data, 1, 1000);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	f107 010c 	add.w	r1, r7, #12
 8000cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f001 fe63 	bl	8002998 <HAL_UART_Transmit>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cfc:	f842 3b04 	str.w	r3, [r2], #4

08000d00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <LoopForever+0x16>)
	cmp	r2, r3
 8000d02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d06:	f7ff ff99 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f002 fa89 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fcad 	bl	800066c <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d14:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000d18:	080032d8 	.word	0x080032d8
	ldr	r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d28:	200001a0 	.word	0x200001a0

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x28>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x28>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f92f 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe6c 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f939 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f90f 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000019c 	.word	0x2000019c

08000de4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000019c 	.word	0x2000019c

08000dfc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_Delay+0x40>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff47 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5c 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e14e      	b.n	80012ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8140 	beq.w	80012b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d00b      	beq.n	8001054 <HAL_GPIO_Init+0x48>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001048:	2b11      	cmp	r3, #17
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0xea>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 809a 	beq.w	80012b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c2:	d013      	beq.n	80011ec <HAL_GPIO_Init+0x1e0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2d4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x2d8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1d8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1d4>
 80011dc:	2303      	movs	r3, #3
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011e0:	2305      	movs	r3, #5
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001230:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_GPIO_Init+0x2e0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f aea9 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	48000c00 	.word	0x48000c00
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130c:	e002      	b.n	8001314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001326:	af00      	add	r7, sp, #0
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 bef4 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 816a 	beq.w	800161e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800134a:	4bb3      	ldr	r3, [pc, #716]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001356:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d159      	bne.n	8001416 <HAL_RCC_OscConfig+0xf6>
 8001362:	4bad      	ldr	r3, [pc, #692]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d152      	bne.n	8001416 <HAL_RCC_OscConfig+0xf6>
 8001370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001374:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001384:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x82>
 800139c:	4b9e      	ldr	r3, [pc, #632]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0xae>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f002 021f 	and.w	r2, r2, #31
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 810c 	beq.w	800161c <HAL_RCC_OscConfig+0x2fc>
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 8106 	bne.w	800161c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f000 be86 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x110>
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e030      	b.n	8001492 <HAL_RCC_OscConfig+0x172>
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x134>
 800143a:	4b77      	ldr	r3, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a76      	ldr	r2, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b74      	ldr	r3, [pc, #464]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a73      	ldr	r2, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01e      	b.n	8001492 <HAL_RCC_OscConfig+0x172>
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x15a>
 8001460:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a69      	ldr	r2, [pc, #420]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x172>
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a66      	ldr	r2, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a63      	ldr	r2, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f023 020f 	bic.w	r2, r3, #15
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	495d      	ldr	r1, [pc, #372]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d059      	beq.n	8001564 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc98 	bl	8000de4 <HAL_GetTick>
 80014b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff fc93 	bl	8000de4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d902      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	f000 be29 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
 80014d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d102      	bne.n	8001502 <HAL_RCC_OscConfig+0x1e2>
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x20e>
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800151e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001532:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001536:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800153a:	fa92 f2a2 	rbit	r2, r2
 800153e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001542:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001546:	fab2 f282 	clz	r2, r2
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f042 0220 	orr.w	r2, r2, #32
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	f002 021f 	and.w	r2, r2, #31
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ab      	beq.n	80014ba <HAL_RCC_OscConfig+0x19a>
 8001562:	e05c      	b.n	800161e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc3e 	bl	8000de4 <HAL_GetTick>
 8001568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156e:	f7ff fc39 	bl	8000de4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d902      	bls.n	8001584 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	f000 bdcf 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
 8001584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001588:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001598:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x296>
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x2c2>
 80015b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_RCC_OscConfig+0x2f8>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0220 	orr.w	r2, r2, #32
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ab      	bne.n	800156e <HAL_RCC_OscConfig+0x24e>
 8001616:	e002      	b.n	800161e <HAL_RCC_OscConfig+0x2fe>
 8001618:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 816f 	beq.w	800190c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800162e:	4bd0      	ldr	r3, [pc, #832]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800163a:	4bcd      	ldr	r3, [pc, #820]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d16c      	bne.n	8001720 <HAL_RCC_OscConfig+0x400>
 8001646:	4bca      	ldr	r3, [pc, #808]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d166      	bne.n	8001720 <HAL_RCC_OscConfig+0x400>
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001664:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d102      	bne.n	8001682 <HAL_RCC_OscConfig+0x362>
 800167c:	4bbc      	ldr	r3, [pc, #752]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	e013      	b.n	80016aa <HAL_RCC_OscConfig+0x38a>
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800169a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016a6:	4bb2      	ldr	r3, [pc, #712]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2202      	movs	r2, #2
 80016ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016b4:	fa92 f2a2 	rbit	r2, r2
 80016b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <HAL_RCC_OscConfig+0x3cc>
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f000 bd1b 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4ba0      	ldr	r3, [pc, #640]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	21f8      	movs	r1, #248	; 0xf8
 80016fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001704:	fa91 f1a1 	rbit	r1, r1
 8001708:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800170c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001710:	fab1 f181 	clz	r1, r1
 8001714:	b2c9      	uxtb	r1, r1
 8001716:	408b      	lsls	r3, r1
 8001718:	4995      	ldr	r1, [pc, #596]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e0f5      	b.n	800190c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8085 	beq.w	8001836 <HAL_RCC_OscConfig+0x516>
 800172c:	2301      	movs	r3, #1
 800172e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800173e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800174c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb44 	bl	8000de4 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fb3f 	bl	8000de4 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d902      	bls.n	8001778 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	f000 bcd5 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800178a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x488>
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x4b0>
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017da:	fa92 f2a2 	rbit	r2, r2
 80017de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0af      	beq.n	8001762 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	21f8      	movs	r1, #248	; 0xf8
 8001812:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800181a:	fa91 f1a1 	rbit	r1, r1
 800181e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001822:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001826:	fab1 f181 	clz	r1, r1
 800182a:	b2c9      	uxtb	r1, r1
 800182c:	408b      	lsls	r3, r1
 800182e:	4950      	ldr	r1, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e06a      	b.n	800190c <HAL_RCC_OscConfig+0x5ec>
 8001836:	2301      	movs	r3, #1
 8001838:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001848:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001856:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	461a      	mov	r2, r3
 800185e:	2300      	movs	r3, #0
 8001860:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fabf 	bl	8000de4 <HAL_GetTick>
 8001866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff faba 	bl	8000de4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d902      	bls.n	8001882 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	f000 bc50 	b.w	8002122 <HAL_RCC_OscConfig+0xe02>
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x592>
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e013      	b.n	80018da <HAL_RCC_OscConfig+0x5ba>
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x650>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2202      	movs	r2, #2
 80018dc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018e4:	fa92 f2a2 	rbit	r2, r2
 80018e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018f0:	fab2 f282 	clz	r2, r2
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f002 021f 	and.w	r2, r2, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1af      	bne.n	800186c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80da 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d069      	beq.n	80019fa <HAL_RCC_OscConfig+0x6da>
 8001926:	2301      	movs	r3, #1
 8001928:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x654>)
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2301      	movs	r3, #1
 800194e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fa48 	bl	8000de4 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001958:	e00e      	b.n	8001978 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff fa43 	bl	8000de4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d906      	bls.n	8001978 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e3d9      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	10908120 	.word	0x10908120
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800198a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800198e:	2202      	movs	r2, #2
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019a6:	2202      	movs	r2, #2
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4ba5      	ldr	r3, [pc, #660]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 80019bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019c2:	2102      	movs	r1, #2
 80019c4:	6019      	str	r1, [r3, #0]
 80019c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f1a3 	rbit	r1, r3
 80019d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019d4:	6019      	str	r1, [r3, #0]
  return result;
 80019d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0b0      	beq.n	800195a <HAL_RCC_OscConfig+0x63a>
 80019f8:	e06a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7b0>
 80019fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a10:	601a      	str	r2, [r3, #0]
  return result;
 8001a12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f9da 	bl	8000de4 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff f9d5 	bl	8000de4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e36b      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8001a4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a66:	2202      	movs	r2, #2
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a7e:	2202      	movs	r2, #2
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	6019      	str	r1, [r3, #0]
 8001a9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f1a3 	rbit	r1, r3
 8001aa8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aac:	6019      	str	r1, [r3, #0]
  return result;
 8001aae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1b2      	bne.n	8001a36 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8158 	beq.w	8001d90 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d112      	bne.n	8001b18 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a56      	ldr	r2, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11a      	bne.n	8001b5a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f958 	bl	8000de4 <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff f953 	bl	8000de4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e2e9      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0ef      	beq.n	8001b3a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x852>
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e02f      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8b2>
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x876>
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e01d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8b2>
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0x89a>
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8b2>
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d06b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f902 	bl	8000de4 <HAL_GetTick>
 8001be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f8fd 	bl	8000de4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e291      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8001bfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c02:	2202      	movs	r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c2c:	601a      	str	r2, [r3, #0]
  return result;
 8001c2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d109      	bne.n	8001c5c <HAL_RCC_OscConfig+0x93c>
 8001c48:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <HAL_RCC_OscConfig+0x930>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x958>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	10908120 	.word	0x10908120
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	4bbb      	ldr	r3, [pc, #748]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	fa92 f1a2 	rbit	r1, r2
 8001c8a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c8e:	6011      	str	r1, [r2, #0]
  return result;
 8001c90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	fab2 f282 	clz	r2, r2
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f002 021f 	and.w	r2, r2, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d099      	beq.n	8001be6 <HAL_RCC_OscConfig+0x8c6>
 8001cb2:	e063      	b.n	8001d7c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f896 	bl	8000de4 <HAL_GetTick>
 8001cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f891 	bl	8000de4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e225      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8001cd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cda:	2202      	movs	r2, #2
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fa93 f2a3 	rbit	r2, r3
 8001d00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d04:	601a      	str	r2, [r3, #0]
  return result;
 8001d06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0xa06>
 8001d20:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	e00d      	b.n	8001d42 <HAL_RCC_OscConfig+0xa22>
 8001d26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d46:	2102      	movs	r1, #2
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	fa92 f1a2 	rbit	r1, r2
 8001d54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d58:	6011      	str	r1, [r2, #0]
  return result;
 8001d5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1a0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b77      	ldr	r3, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a76      	ldr	r2, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 81c2 	beq.w	8002120 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f000 819c 	beq.w	80020e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	f040 8114 	bne.w	8001fde <HAL_RCC_OscConfig+0xcbe>
 8001db6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fffa 	bl	8000de4 <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fff5 	bl	8000de4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e18b      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8001e0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0xb24>
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e01b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb5c>
 8001e44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fa92 f1a2 	rbit	r1, r2
 8001e90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e94:	6011      	str	r1, [r2, #0]
  return result;
 8001e96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d19e      	bne.n	8001df6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4925      	ldr	r1, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eec:	601a      	str	r2, [r3, #0]
  return result;
 8001eee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ef2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	2301      	movs	r3, #1
 8001f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ff6b 	bl	8000de4 <HAL_GetTick>
 8001f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f12:	e009      	b.n	8001f28 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ff66 	bl	8000de4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0fc      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8001f28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f40:	601a      	str	r2, [r3, #0]
  return result;
 8001f42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0xc48>
 8001f5c:	4b01      	ldr	r3, [pc, #4]	; (8001f64 <HAL_RCC_OscConfig+0xc44>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e01e      	b.n	8001fa0 <HAL_RCC_OscConfig+0xc80>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_OscConfig+0xe0c>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	fa92 f1a2 	rbit	r1, r2
 8001fb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fb8:	6011      	str	r1, [r2, #0]
  return result;
 8001fba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f002 021f 	and.w	r2, r2, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d09b      	beq.n	8001f14 <HAL_RCC_OscConfig+0xbf4>
 8001fdc:	e0a0      	b.n	8002120 <HAL_RCC_OscConfig+0xe00>
 8001fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fee6 	bl	8000de4 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe fee1 	bl	8000de4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e077      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
 8002032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204a:	601a      	str	r2, [r3, #0]
  return result;
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_RCC_OscConfig+0xd4c>
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_OscConfig+0xe0c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd84>
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f107 0320 	add.w	r3, r7, #32
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_OscConfig+0xe0c>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f107 0210 	add.w	r2, r7, #16
 80020a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020ac:	6011      	str	r1, [r2, #0]
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fa92 f1a2 	rbit	r1, r2
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	6011      	str	r1, [r2, #0]
  return result;
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d19e      	bne.n	800201e <HAL_RCC_OscConfig+0xcfe>
 80020e0:	e01e      	b.n	8002120 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e018      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCC_OscConfig+0xe0c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	429a      	cmp	r2, r3
 8002108:	d108      	bne.n	800211c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800210a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b09e      	sub	sp, #120	; 0x78
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e162      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b90      	ldr	r3, [pc, #576]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b8d      	ldr	r3, [pc, #564]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	498b      	ldr	r1, [pc, #556]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b89      	ldr	r3, [pc, #548]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e14a      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b82      	ldr	r3, [pc, #520]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	497f      	ldr	r1, [pc, #508]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80dc 	beq.w	800235c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d13c      	bne.n	8002226 <HAL_RCC_ClockConfig+0xf6>
 80021ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xa6>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e00f      	b.n	80021f6 <HAL_RCC_ClockConfig+0xc6>
 80021d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	667b      	str	r3, [r7, #100]	; 0x64
 80021e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
 80021ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80021fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d17b      	bne.n	800231a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0f3      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d13c      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x178>
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_ClockConfig+0x128>
 8002252:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e00f      	b.n	8002278 <HAL_RCC_ClockConfig+0x148>
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
 8002266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
 800226c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227c:	63ba      	str	r2, [r7, #56]	; 0x38
 800227e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002280:	fa92 f2a2 	rbit	r2, r2
 8002284:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f002 021f 	and.w	r2, r2, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d13a      	bne.n	800231a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b2      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
 80022a8:	2302      	movs	r3, #2
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d102      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x1a0>
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	e00d      	b.n	80022ec <HAL_RCC_ClockConfig+0x1bc>
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2202      	movs	r2, #2
 80022ee:	61ba      	str	r2, [r7, #24]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	fa92 f2a2 	rbit	r2, r2
 80022f6:	617a      	str	r2, [r7, #20]
  return result;
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e079      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	491a      	ldr	r1, [pc, #104]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7fe fd5a 	bl	8000de4 <HAL_GetTick>
 8002330:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fd56 	bl	8000de4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e061      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_ClockConfig+0x260>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d214      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4906      	ldr	r1, [pc, #24]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_RCC_ClockConfig+0x25c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e040      	b.n	800240e <HAL_RCC_ClockConfig+0x2de>
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCC_ClockConfig+0x2e8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	491a      	ldr	r1, [pc, #104]	; (8002418 <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_RCC_ClockConfig+0x2e8>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4912      	ldr	r1, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x2e8>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023d2:	f000 f829 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023d6:	4601      	mov	r1, r0
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_RCC_ClockConfig+0x2e8>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	22f0      	movs	r2, #240	; 0xf0
 80023e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	fa92 f2a2 	rbit	r2, r2
 80023ea:	60fa      	str	r2, [r7, #12]
  return result;
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	fab2 f282 	clz	r2, r2
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	40d3      	lsrs	r3, r2
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x2ec>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	fa21 f303 	lsr.w	r3, r1, r3
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_RCC_ClockConfig+0x2f0>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCC_ClockConfig+0x2f4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fca8 	bl	8000d5c <HAL_InitTick>
  
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3778      	adds	r7, #120	; 0x78
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	08003290 	.word	0x08003290
 8002420:	20000000 	.word	0x20000000
 8002424:	20000004 	.word	0x20000004

08002428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b08b      	sub	sp, #44	; 0x2c
 800242c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x30>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x36>
 8002456:	e03c      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800245a:	623b      	str	r3, [r7, #32]
      break;
 800245c:	e03c      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002464:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002468:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	607a      	str	r2, [r7, #4]
  return result;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	40d3      	lsrs	r3, r2
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	220f      	movs	r2, #15
 800248c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	fa92 f2a2 	rbit	r2, r2
 8002494:	60fa      	str	r2, [r7, #12]
  return result;
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	fab2 f282 	clz	r2, r2
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	40d3      	lsrs	r3, r2
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	623b      	str	r3, [r7, #32]
      break;
 80024d0:	e002      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80024d4:	623b      	str	r3, [r7, #32]
      break;
 80024d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	372c      	adds	r7, #44	; 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	007a1200 	.word	0x007a1200
 80024f0:	080032a8 	.word	0x080032a8
 80024f4:	080032b8 	.word	0x080032b8
 80024f8:	003d0900 	.word	0x003d0900

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_GetHCLKFreq+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800251a:	f7ff ffef 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 800251e:	4601      	mov	r1, r0
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002528:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800252c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fa92 f2a2 	rbit	r2, r2
 8002534:	603a      	str	r2, [r7, #0]
  return result;
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	40d3      	lsrs	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	080032a0 	.word	0x080032a0

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800255e:	f7ff ffcd 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002562:	4601      	mov	r1, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800256c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002570:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	fa92 f2a2 	rbit	r2, r2
 8002578:	603a      	str	r2, [r7, #0]
  return result;
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	40d3      	lsrs	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	080032a0 	.word	0x080032a0

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b092      	sub	sp, #72	; 0x48
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80d0 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c0:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10e      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b83      	ldr	r3, [pc, #524]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4a82      	ldr	r2, [pc, #520]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	61d3      	str	r3, [r2, #28]
 80025d8:	4b80      	ldr	r3, [pc, #512]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b7d      	ldr	r3, [pc, #500]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b7a      	ldr	r3, [pc, #488]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe fbef 	bl	8000de4 <HAL_GetTick>
 8002606:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe fbeb 	bl	8000de4 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0db      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d07d      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002642:	429a      	cmp	r2, r3
 8002644:	d076      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	461a      	mov	r2, r3
 8002670:	2301      	movs	r3, #1
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	461a      	mov	r2, r3
 8002694:	2300      	movs	r3, #0
 8002696:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002698:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d045      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fb9c 	bl	8000de4 <HAL_GetTick>
 80026ac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fb98 	bl	8000de4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e086      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	61fb      	str	r3, [r7, #28]
  return result;
 80026de:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d102      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	e007      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2202      	movs	r2, #2
 800270c:	613a      	str	r2, [r7, #16]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	fa92 f2a2 	rbit	r2, r2
 8002714:	60fa      	str	r2, [r7, #12]
  return result;
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	fab2 f282 	clz	r2, r2
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f002 021f 	and.w	r2, r2, #31
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f202 	lsl.w	r2, r1, r2
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0bd      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4926      	ldr	r1, [pc, #152]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002742:	4313      	orrs	r3, r2
 8002744:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	491a      	ldr	r1, [pc, #104]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002774:	4313      	orrs	r3, r2
 8002776:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f023 0210 	bic.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4912      	ldr	r1, [pc, #72]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002792:	4313      	orrs	r3, r2
 8002794:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3748      	adds	r7, #72	; 0x48
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	10908100 	.word	0x10908100

080027e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07c      	b.n	80028f4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7fe f92b 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800283a:	d902      	bls.n	8002842 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e002      	b.n	8002848 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002846:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002850:	d007      	beq.n	8002862 <HAL_SPI_Init+0x7a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800285a:	d002      	beq.n	8002862 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002872:	d903      	bls.n	800287c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
 800287a:	e002      	b.n	8002882 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0204 	and.w	r2, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	ea42 0103 	orr.w	r1, r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e040      	b.n	8002990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f8e8 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f98c 	bl	8002c58 <UART_SetConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fb02 	bl	8002f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fb89 	bl	80030a0 <UART_CheckIdleState>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 8081 	bne.w	8002ab4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit+0x26>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e079      	b.n	8002ab6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x38>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e072      	b.n	8002ab6 <HAL_UART_Transmit+0x11e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029e4:	f7fe f9fe 	bl	8000de4 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d108      	bne.n	8002a16 <HAL_UART_Transmit+0x7e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e003      	b.n	8002a1e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a1e:	e02d      	b.n	8002a7c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fb7d 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e03d      	b.n	8002ab6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3302      	adds	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e008      	b.n	8002a6a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b292      	uxth	r2, r2
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1cb      	bne.n	8002a20 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fb49 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e009      	b.n	8002ab6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08a      	sub	sp, #40	; 0x28
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 80bb 	bne.w	8002c4e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_UART_Receive+0x26>
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b3      	b.n	8002c50 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Receive+0x38>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0ac      	b.n	8002c50 <HAL_UART_Receive+0x192>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2222      	movs	r2, #34	; 0x22
 8002b08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f96b 	bl	8000de4 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d10e      	bne.n	8002b48 <HAL_UART_Receive+0x8a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_UART_Receive+0x80>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b3c:	e02d      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b46:	e028      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_UART_Receive+0xae>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_UART_Receive+0xa4>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b60:	e01b      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	227f      	movs	r2, #127	; 0x7f
 8002b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b6a:	e016      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b74:	d10d      	bne.n	8002b92 <HAL_UART_Receive+0xd4>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_UART_Receive+0xca>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	227f      	movs	r2, #127	; 0x7f
 8002b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b86:	e008      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	223f      	movs	r2, #63	; 0x3f
 8002b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b90:	e003      	b.n	8002b9a <HAL_UART_Receive+0xdc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ba0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d108      	bne.n	8002bbe <HAL_UART_Receive+0x100>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e003      	b.n	8002bc6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bc6:	e033      	b.n	8002c30 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 faa9 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e036      	b.n	8002c50 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10c      	bne.n	8002c02 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	8a7b      	ldrh	r3, [r7, #18]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e00d      	b.n	8002c1e <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1c5      	bne.n	8002bc8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
  }
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4ba2      	ldr	r3, [pc, #648]	; (8002f10 <UART_SetConfig+0x2b8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <UART_SetConfig+0x2bc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d121      	bne.n	8002d1c <UART_SetConfig+0xc4>
 8002cd8:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <UART_SetConfig+0x2c0>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d817      	bhi.n	8002d14 <UART_SetConfig+0xbc>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <UART_SetConfig+0x94>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d0f 	.word	0x08002d0f
 8002cf8:	08002d03 	.word	0x08002d03
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e01e      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d02:	2302      	movs	r3, #2
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e01b      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e018      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d0e:	2308      	movs	r3, #8
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e015      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d14:	2310      	movs	r3, #16
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	bf00      	nop
 8002d1a:	e011      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7e      	ldr	r2, [pc, #504]	; (8002f1c <UART_SetConfig+0x2c4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d102      	bne.n	8002d2c <UART_SetConfig+0xd4>
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e009      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7b      	ldr	r2, [pc, #492]	; (8002f20 <UART_SetConfig+0x2c8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d102      	bne.n	8002d3c <UART_SetConfig+0xe4>
 8002d36:	2300      	movs	r3, #0
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e001      	b.n	8002d40 <UART_SetConfig+0xe8>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d48:	f040 8082 	bne.w	8002e50 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002d4c:	7ffb      	ldrb	r3, [r7, #31]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d85e      	bhi.n	8002e10 <UART_SetConfig+0x1b8>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x100>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d9d 	.word	0x08002d9d
 8002d60:	08002dbd 	.word	0x08002dbd
 8002d64:	08002e11 	.word	0x08002e11
 8002d68:	08002dd9 	.word	0x08002dd9
 8002d6c:	08002e11 	.word	0x08002e11
 8002d70:	08002e11 	.word	0x08002e11
 8002d74:	08002e11 	.word	0x08002e11
 8002d78:	08002df9 	.word	0x08002df9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7ff fbca 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 8002d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	005a      	lsls	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	61bb      	str	r3, [r7, #24]
        break;
 8002d9a:	e03c      	b.n	8002e16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7ff fbdc 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002da0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	005a      	lsls	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	61bb      	str	r3, [r7, #24]
        break;
 8002dba:	e02c      	b.n	8002e16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002dc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6852      	ldr	r2, [r2, #4]
 8002dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	61bb      	str	r3, [r7, #24]
        break;
 8002dd6:	e01e      	b.n	8002e16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd8:	f7ff fb26 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8002ddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	005a      	lsls	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	61bb      	str	r3, [r7, #24]
        break;
 8002df6:	e00e      	b.n	8002e16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	61bb      	str	r3, [r7, #24]
        break;
 8002e0e:	e002      	b.n	8002e16 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
        break;
 8002e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b0f      	cmp	r3, #15
 8002e1a:	d916      	bls.n	8002e4a <UART_SetConfig+0x1f2>
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	d212      	bcs.n	8002e4a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f023 030f 	bic.w	r3, r3, #15
 8002e2c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	897a      	ldrh	r2, [r7, #10]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e07d      	b.n	8002f46 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
 8002e4e:	e07a      	b.n	8002f46 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002e50:	7ffb      	ldrb	r3, [r7, #31]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d866      	bhi.n	8002f24 <UART_SetConfig+0x2cc>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <UART_SetConfig+0x204>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e81 	.word	0x08002e81
 8002e60:	08002e9f 	.word	0x08002e9f
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002f25 	.word	0x08002f25
 8002e6c:	08002ed9 	.word	0x08002ed9
 8002e70:	08002f25 	.word	0x08002f25
 8002e74:	08002f25 	.word	0x08002f25
 8002e78:	08002f25 	.word	0x08002f25
 8002e7c:	08002ef7 	.word	0x08002ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e80:	f7ff fb48 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	085a      	lsrs	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	441a      	add	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
        break;
 8002e9c:	e045      	b.n	8002f2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e9e:	f7ff fb5b 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002ea2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	085a      	lsrs	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	61bb      	str	r3, [r7, #24]
        break;
 8002eba:	e036      	b.n	8002f2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002ec6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6852      	ldr	r2, [r2, #4]
 8002ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	61bb      	str	r3, [r7, #24]
        break;
 8002ed6:	e028      	b.n	8002f2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed8:	f7ff faa6 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8002edc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085a      	lsrs	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	441a      	add	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e019      	b.n	8002f2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e00d      	b.n	8002f2a <UART_SetConfig+0x2d2>
 8002f0e:	bf00      	nop
 8002f10:	efff69f3 	.word	0xefff69f3
 8002f14:	40013800 	.word	0x40013800
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
        break;
 8002f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d908      	bls.n	8002f42 <UART_SetConfig+0x2ea>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d204      	bcs.n	8002f42 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	e001      	b.n	8002f46 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01a      	beq.n	8003072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305a:	d10a      	bne.n	8003072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030ae:	f7fd fe99 	bl	8000de4 <HAL_GetTick>
 80030b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d10e      	bne.n	80030e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f82a 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e020      	b.n	8003122 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d10e      	bne.n	800310c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f814 	bl	800312a <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e00a      	b.n	8003122 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313a:	e05d      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003142:	d059      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7fd fe4e 	bl	8000de4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <UART_WaitOnFlagUntilTimeout+0x30>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11b      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003168:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e042      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02b      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d123      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00f      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d092      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4e0d      	ldr	r6, [pc, #52]	; (8003258 <__libc_init_array+0x38>)
 8003224:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003226:	1ba4      	subs	r4, r4, r6
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	2500      	movs	r5, #0
 800322c:	42a5      	cmp	r5, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	4e0b      	ldr	r6, [pc, #44]	; (8003260 <__libc_init_array+0x40>)
 8003232:	4c0c      	ldr	r4, [pc, #48]	; (8003264 <__libc_init_array+0x44>)
 8003234:	f000 f820 	bl	8003278 <_init>
 8003238:	1ba4      	subs	r4, r4, r6
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	2500      	movs	r5, #0
 800323e:	42a5      	cmp	r5, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003248:	4798      	blx	r3
 800324a:	3501      	adds	r5, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003252:	4798      	blx	r3
 8003254:	3501      	adds	r5, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	080032c8 	.word	0x080032c8
 800325c:	080032c8 	.word	0x080032c8
 8003260:	080032c8 	.word	0x080032c8
 8003264:	080032d0 	.word	0x080032d0

08003268 <memset>:
 8003268:	4402      	add	r2, r0
 800326a:	4603      	mov	r3, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <_init>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

08003284 <_fini>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr
